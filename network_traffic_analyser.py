# A network traffic analyser to find if any breaches of device ID data have taken place
import os
from subprocess import Popen, PIPE, STDOUT, call, run, check_output
import signal
import time
import sys

def killProcess():
      
    # Ask user for the name of process
    name = "mitmdump"
    try:
          
        # iterating through each instance of the proess
        for line in os.popen("ps ax | grep " + name + " | grep -v grep"): 
            fields = line.split()
              
            # extracting Process ID from the output
            pid = fields[0] 
              
            # terminating process 
            os.kill(int(pid), signal.SIGKILL) 
        print("Process Successfully terminated")
          
    except:
        print("Error Encountered while running script")
   

# Get folder with list of apks to test (APKs/)
apks = os.listdir("APKs/")
# For each file in APKs install it to android device via adb
connected = True
#while(~connected):
#    try:
#        #check_output(["adb", "devices"])
#        connected = True
#    except:    
#        input("Please connect your device now and press Enter to continue... ")

startingPort = 1259
for apk in apks:
    killProcess()
    call("adb install APKs/" + apk, shell=True)
    packageName = apk[:-4]
    print(packageName)
    call("adb shell monkey -p " + packageName + " 1", shell=True) # Launch the app
    process = Popen(args = ["mitmdump -s save.py -p " + str(startingPort) + " --set output=\"" + apk + "\""], shell=True, stdout=PIPE, stdin=PIPE, stderr=STDOUT)  # Run mitmproxy with save mode on to file named com.package.name-mitmproxy.txt and wait 5 minutes
    i = 0
    while i < 2:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
           break
        if output:
            print(output.strip())
        time.sleep(1)
        i = i+1
    #startingPort = startingPort + 1
    time.sleep(20)
    call("adb shell am start -a android.intent.action.MAIN -c android.intent.category.HOME", shell=True)
    call("adb uninstall " + packageName, shell=True) # Uninstall the app

# This will result in a file for each app tested with specific network traffic data for each app

# Open file which includes all of device IDs (deviceInfo.txt)
deviceInfo = open("deviceInfo.txt", "r")
deviceInfoLines = [line.rstrip('\n').strip() for line in deviceInfo]
for i, line in enumerate(deviceInfoLines):
    num = line.find(':')
    line = line[num+1:]
    line = line.replace(" ", "")
    deviceInfoLines[i] = line

for line in deviceInfoLines:
    if len(line) == 0:
        deviceInfoLines.remove(line)

for line in deviceInfoLines:
    x = line.split("/")

deviceInfoLines = deviceInfoLines + x

# Open file which includes any blacklisted URLs (blacklist.txt)
blacklist = open("blacklist.txt", "r")
blacklistLines = [line.rstrip('\n').strip() for line in blacklist]

output = os.listdir("output/")
# Check each app network traffic file to see if any of the device info is included or if any blacklisted URLs were accessed
for appOutput in output:
    #Seperate appOutput into individual requests
    appOutputData = open("output/" + appOutput, "r")
    appOutputRequests = list(appOutputData)
    #print(appOutputRequests)

    infoURLs = []
    infoHosts = []
    for info in deviceInfoLines:
        #print(info)
        process = run(["grep -i \"" + info + "\" output/" + appOutput], shell=True, capture_output=True)
        if process.returncode == 0:
            #print(info + " found in " + appOutput)
            # Get the URL
            #appOutputData = open("output/" + appOutput, "r")
            #appOutputLines = [line.rstrip('\n').strip() for line in appOutputData]
            host = ""
            end = ""
            for line in appOutputRequests:
                line = line.replace("\n", "")
                #print(line)
                if "GET" in line or "POST" in line:
                    end = line[4:-9]
                if "Host" in line:  
                    host = line[6:]
            
            infoHosts.append(host)
            infoURLs.append("http://" + host + end)
            print(info + " was sent to " + "http://" + host + end + " from " + appOutput[:-14])

    for url in blacklistLines:
        process = run(["grep -i \"" + url + "\" output/" + appOutput], shell=True, capture_output=True)
        if process.returncode == 0:
            print("Blacklisted URL: " + url + " was accessed by " + appOutput[:-14])
            
    #for url in infoURLs:
    #    print(url)
    for host in infoHosts:
        blacklist = open("blacklist.txt", "r")
        blacklistLines = [line.rstrip('\n').strip() for line in blacklist]
        if host not in blacklistLines:
        #    print("Do you want to add " + host + " to the blacklist?")
        #    reply = str(input(' (y/n): ')).lower().strip()
        #    if reply[0] == 'y':
                blacklist = open("blacklist.txt", "a")
                blacklist.write(host+"\n")

# Output a list of URLs which have had device IDs sent to them
# Ask if user wants to add them to a new blacklist file 